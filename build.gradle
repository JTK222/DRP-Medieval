buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven {url='https://dist.creeper.host/Sponge/maven'}
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath "com.wynprice.cursemaven:CurseMaven:1.2.3"
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'idea'
    id 'maven-publish'
}

//The Plugin block only works for plugins in the gradle maven
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'com.wynprice.cursemaven'
apply plugin: 'org.spongepowered.mixin'


def MOD_VERSION = '0.5';

version = "${mc_version}-${mod_version}"
group = "net.dark_roleplay.${modid}"
archivesBaseName = "${modid}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

configurations {
    apiCompile.extendsFrom(compile)
}

sourceSets {
    api
    main.resources.srcDirs += 'src/generated/resources'
    main {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
    }
}

minecraft {
    mappings channel: 'snapshot', version: "${mapping}-${mcp_version}"

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('runs/client')
            arg "-mixin.config=" + modid + ".mixins.json"

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('runs/server')
            arg "-mixin.config=" + modid + ".mixins.json"

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven {url = "https://maven.dark-roleplay.net/"}
    maven {url = "https://minecraft.curseforge.com/api/maven/"}
    mavenLocal()
}

dependencies {
    minecraft([
            group   : 'net.minecraftforge',
            name    : 'forge',
            version : "${mc_version}-${forge_version}"

    ])

    compileOnly(fg.deobf("net.dark_roleplay:marg:1.16.2-0.5.5:api"))
    runtimeOnly(fg.deobf("net.dark_roleplay:marg:1.16.2-0.5.5"))
}

jar {
    from sourceSets.main.output.classesDirs
    from sourceSets.main.output.resourcesDir
    from sourceSets.api.output.resourcesDir
    from sourceSets.api.output.classesDirs

    manifest {
        attributes([
            "Specification-Title": "${modid}",
            "Specification-Vendor": "Dark Roleplay",
            "Specification-Version": "1",
            "Implementation-Title": "Project Brazier",
            "Implementation-Version": "${version}",
            "Implementation-Vendor": "Dark Roleplay",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": "${modid}.mixins.json"
        ])
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
    from sourceSets.api.allSource
}

task apiJar(type: Jar) {
    classifier = 'api'
    from sourceSets.api.output
}

artifacts {
    archives apiJar
    archives sourcesJar
    archives javadocJar
}

import groovy.json.JsonSlurper
import groovy.json.JsonOutput

processResources {
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'

        expand 'version': project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }

    doLast {
        // Minify json resources
        fileTree(dir: outputs.files.asPath, include: "**/*.json").each{
            File file -> file.text = JsonOutput.toJson(new JsonSlurper().parse(file));
        }

        // Minify pngs resources

        fileTree(dir: outputs.files.asPath, include: "**/*.png").each {
            File file ->
                def proc = ('pingo -quiet -strip -auto ' + file).execute();
                proc.waitFor();
        }
    }
}

//curseforge {
//    apiKey = System.getenv('CURSE_API_KEY') // This should really be in a gradle.properties file
//    project {
//        id = '238326'
//        changelog = file('changelog.txt') // A file can also be set using: changelog = file('changelog.txt')
//        releaseType = 'alpha'
//        mainArtifact(jar) {
//            displayName = "DRP Medieval - ${MC_VERSION} - v${MOD_VERSION} Alpha"
//            relations {
//                requiredDependency 'marg'
//            }
//        }
//    }
//}

def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = project.group
            artifactId = project.archivesBaseName
            version = project.version

            artifact reobfArtifact
            artifact apiJar
            artifact sourcesJar
            artifact javadocJar
        }
    }
    repositories {
        maven {
            url System.getenv('MVN_REPO')
            credentials {
                username System.getenv('MVN_USER')
                password System.getenv('MVN_PASSWORD')
            }
        }
    }
}

mixin {
    add sourceSets.main, "${modid}.refmap.json"
}